using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CommunityDKPBidHistory.Data
{
	/// <summary>
	/// JSON-serializable loot history.
	/// </summary>
	public class History
	{
		/// <summary>
		/// Map of loot ID (string; generated by this app) to LootItem.
		/// </summary>
		public ConcurrentDictionary<string, LootItem> lootItems = new ConcurrentDictionary<string, LootItem>();

		/// <summary>
		/// Map of player name to wow class.
		/// </summary>
		public ConcurrentDictionary<string, string> playerClasses = new ConcurrentDictionary<string, string>();

		/// <summary>
		/// Loads a History instance from a CommunityDKP.lua file.
		/// </summary>
		/// <param name="luaFilePath">Path to the lua file.</param>
		/// <returns></returns>
		public static History FromLuaFile(string luaFilePath)
		{
			History h = new History();
			h.AddFromLuaString(File.ReadAllText(luaFilePath));
			return h;
		}

		/// <summary>
		/// Loads a History instance from a CommunityDKP.lua file.
		/// </summary>
		/// <param name="luaFileContents">Lua code.</param>
		/// <returns></returns>
		public void AddFromLuaString(string luaFileContents)
		{
			List<LootItem> _loots = GetLoots(luaFileContents);
			List<Player> _players = GetPlayers(luaFileContents);

			foreach (LootItem item in _loots)
			{
				if (item.name != null)
					lootItems[item.GetLootId()] = item;
			}

			foreach (Player player in _players)
			{
				if (!string.IsNullOrWhiteSpace(player.name) && !string.IsNullOrWhiteSpace(player.wowclass))
					playerClasses[player.name] = player.wowclass;
			}
		}

		#region Lua File Reading
		private static Regex rxFindLootItem = new Regex("{([^}]+)}", RegexOptions.Compiled | RegexOptions.Singleline);
		private static Regex rxFindLootDetail = new Regex("\\[\"([^\"]+)\"\\] = ([^\\r\\n]+)", RegexOptions.Compiled | RegexOptions.Singleline);
		private static Regex rxParseLootValue = new Regex("\\|([^|]+)\\|Hitem:(\\d+):[^|]+\\|h\\[([^\\]]+)\\]\\|", RegexOptions.Compiled);

		private static List<LootItem> GetLoots(string lua)
		{
			return ParseLua<LootItem>(lua, "CommDKP_Loot", (item, key, value) =>
			{
				if (key.Equals("date", StringComparison.OrdinalIgnoreCase) && long.TryParse(value, out long n1))
					item.date = n1;
				else if (key.Equals("cost", StringComparison.OrdinalIgnoreCase) && long.TryParse(value, out long n2))
					item.cost = (int)n2;
				else if (key.Equals("player", StringComparison.OrdinalIgnoreCase))
					item.player = value;
				else if (key.Equals("zone", StringComparison.OrdinalIgnoreCase))
					item.zone = value;
				else if (key.Equals("boss", StringComparison.OrdinalIgnoreCase))
					item.boss = value;
				else if (key.Equals("loot", StringComparison.OrdinalIgnoreCase))
				{
					Match lootParsed = rxParseLootValue.Match(value);
					if (lootParsed.Success)
					{
						string color = lootParsed.Groups[1].Value;
						if (color.Length > 6)
							color = color.Substring(color.Length - 6);
						item.color = color;
						item.itemid = int.Parse(lootParsed.Groups[2].Value);
						item.name = lootParsed.Groups[3].Value;
					}
				}
			},
			(a, b) =>
			{
				return b.date.CompareTo(a.date);
			});
		}
		private static HashSet<string> wowClasses = new HashSet<string>(new string[] {
			"warrior","druid","paladin"
			,"priest","warlock","mage"
			,"hunter","rogue","shaman"
			,"deathknight","monk","demonhunter"
		});
		private static List<Player> GetPlayers(string lua)
		{
			return ParseLua<Player>(lua, "CommDKP_DKPTable", (item, key, value) =>
			{
				if (key.Equals("player", StringComparison.OrdinalIgnoreCase))
					item.name = value;
				else if (key.Equals("class", StringComparison.OrdinalIgnoreCase))
				{
					value = value.ToLower();
					if (wowClasses.Contains(value))
						item.wowclass = value.ToLower();
					else
						item.wowclass = "unrecognized";
				}
			});
		}
		private static List<T> ParseLua<T>(string lua, string luaObjectName, Action<T, string, string> SetValue, Comparison<T> SortFn = null) where T : new()
		{
			string searchFor = luaObjectName + " = {";
			int startIdx = lua.IndexOf(searchFor);
			if (startIdx > -1)
			{
				startIdx += searchFor.Length;
				int endIdx = lua.IndexOf("\r\n}", startIdx);
				string lootSection = lua.Substring(startIdx, endIdx - startIdx);
				if (endIdx > -1)
				{
					List<T> items = new List<T>();
					Match m = rxFindLootItem.Match(lootSection);
					while (m.Success)
					{
						T item = new T();

						bool itemOk = false;
						Match mDetail = rxFindLootDetail.Match(m.Value);
						while (mDetail.Success)
						{
							itemOk = true;

							string key = mDetail.Groups[1].Value;
							string value = mDetail.Groups[2].Value;
							if (value.EndsWith(","))
								value = value.Substring(0, value.Length - 1);
							if (value.StartsWith("\"") && value.EndsWith("\""))
								value = Regex.Unescape(value.Substring(1, value.Length - 2));
							SetValue(item, key, value);
							mDetail = mDetail.NextMatch();
						}
						if (itemOk)
							items.Add(item);
						m = m.NextMatch();
					}

					if (SortFn != null)
						items.Sort(SortFn);

					return items;
				}
			}
			return new List<T>();
		}
		#endregion
	}
}
